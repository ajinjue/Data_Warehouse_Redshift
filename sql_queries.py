import configparser


# CONFIG
config = configparser.ConfigParser()
config.read('dwh.cfg')

print("Successful connection to the Cluster")

# DROP TABLES

staging_events_table_drop = "DROP TABLE IF EXISTS log_data;"
staging_songs_table_drop = "DROP TABLE IF EXISTS song_data;"
songplay_table_drop = "DROP TABLE IF EXISTS songplays;"
user_table_drop = "DROP TABLE IF EXISTS users;"
song_table_drop = "DROP TABLE IF EXISTS songs;"
artist_table_drop = "DROP TABLE IF EXISTS artists;"
time_table_drop = "DROP TABLE IF EXISTS time;"

# CREATE TABLES

staging_events_table_create= ("""CREATE TABLE IF NOT EXISTS log_data ( 
                                    artist TEXT,
                                    auth VARCHAR(12) NOT NULL,
                                    firstName TEXT NOT NULL,
                                    gender CHAR(1) NOT NULL,
                                    itemInSession int NOT NULL,
                                    lastName TEXT NOT NULL,
                                    length DECIMAL(8,5),
                                    level CHAR(4) NOT NULL,
                                    location TEXT NOT NULL,
                                    method CHAR(3) NOT NULL,
                                    page VARCHAR(10) NOT NULL,
                                    registration bigint NOT NULL,
                                    session_id int NOT NULL,
                                    song TEXT,
                                    status smallint NOT NULL,
                                    ts TIMESTAMP NOT NULL,
                                    userAgent TEXT NOT NULL,
                                    user_id int NOT NULL,
                                    PRIMARY KEY (user_id, itemInSession)
                                    ); """)
print("log_data table created successfully")

staging_songs_table_create = ("""CREATE TABLE IF NOT EXISTS song_data ( 
                                    num_songs int NOT NULL,
                                    artist_id VARCHAR(20) NOT NULL,
                                    artist_latitude NUMERIC,
                                    artist_longitude NUMERIC,
                                    artist_location TEXT,
                                    artist_name TEXT NOT NULL,
                                    song_id VARCHAR(20) NOT NULL,
                                    title TEXT NOT NULL,
                                    duration NUMERIC(8,5) NOT NULL,
                                    year int NOT NULL,
                                    PRIMARY KEY (song_id)
                                    ); """)
print("song_data table created successfully")

user_table_create = ("""CREATE TABLE IF NOT EXISTS users (
                                    user_id int GENERATED BY DEFAULT AS IDENTITY(0,1) PRIMARY KEY,
                                    first_name TEXT NOT NULL,
                                    last_name TEXT NOT NULL,
                                    gender CHAR(1) NOT NULL,
                                    level CHAR(4) NOT NULL
                                    ); """)
print("users table created successfully")

song_table_create = ("""CREATE TABLE IF NOT EXISTS songs (
                                    song_id VARCHAR(20) PRIMARY KEY,
                                    title TEXT NOT NULL,
                                    artist_id VARCHAR(20) NOT NULL,
                                    year int NOT NULL,
                                    duration DECIMAL(8,5) NOT NULL
                                    ); """)
print("songs tables created successfully")

artist_table_create = ("""CREATE TABLE IF NOT EXISTS artists (
                                    artist_id VARCHAR(20) PRIMARY KEY,
                                    name TEXT NOT NULL,
                                    location TEXT NOT NULL,
                                    lattitude NUMERIC,
                                    longitude NUMERIC
                                    ); """)
print("artists table created successfully")

time_table_create = ("""CREATE TABLE IF NOT EXISTS time (
                                    start_time TIMESTAMP PRIMARY KEY,
                                    hour int NOT NULL,
                                    day int NOT NULL,
                                    week int NOT NULL,
                                    month int NOT NULL,
                                    year int NOT NULL,
                                    weekday int NOT NULL
                                    ); """)
print("time table created successfully")

songplay_table_create = ("""CREATE TABLE IF NOT EXISTS songplays (
                                    songplay_id int GENERATED BY DEFAULT AS IDENTITY(0,1) PRIMARY KEY,
                                    start_time TIMESTAMP NOT NULL,
                                    user_id int NOT NULL,
                                    level CHAR(4) NOT NULL,
                                    song_id VARCHAR(20) NOT NULL,
                                    artist_id VARCHAR(20) NOT NULL,
                                    location TEXT NOT NULL,
                                    user_agent TEXT NOT NULL
                                    );
                        ALTER TABLE songplays
                        ADD CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES users(user_id),
                        ADD CONSTRAINT fk_artist FOREIGN KEY (artist_id) REFERENCES artists(artist_id),
                        ADD CONSTRAINT fk_song FOREIGN KEY (song_id) REFERENCES songss(song_id),
                        ADD CONSTRAINT fk_time FOREIGN KEY (start_time) REFERENCES time(start_time); """)          
print("songplays table created successfully")


# STAGING TABLES
DWH_ROLE_ARN = "arn:aws:iam::144316422473:role/dwhRole_akwa"

staging_events_copy = ("""COPY log_data FROM 's3://udacity-dend/log_data/2018/11/2018-11-'
    CREDENTIALS 'aws_iam_role={}'
    REGION 'us-west-2' emptyasnull blanksasnull
    timeformat 'YYYY-MM-DD HH:MI:SS'
    json 's3://udacity-dend/log_json_path.json'
""").format(DWH_ROLE_ARN)
#print("Successful copy of staging events data into log_data target table")

staging_songs_copy = ("""COPY song_data FROM 's3://udacity-dend/song_data/A'
    CREDENTIALS 'aws_iam_role={}'
    REGION 'us-west-2' emptyasnull blanksasnull
    FORMAT AS json 'auto'
""").format(DWH_ROLE_ARN)
#print("Successful copy of staging songs data into song_data target table")

# FINAL TABLES


songplay_table_insert = ("""
""")

user_table_insert = ("""
""")

song_table_insert = ("""
""")

artist_table_insert = ("""
""")

time_table_insert = ("""
""")

# QUERY LISTS

create_table_queries = [staging_events_table_create, staging_songs_table_create, songplay_table_create, user_table_create, song_table_create, artist_table_create, time_table_create]
drop_table_queries = [staging_events_table_drop, staging_songs_table_drop, songplay_table_drop, user_table_drop, song_table_drop, artist_table_drop, time_table_drop]
#copy_table_queries = [staging_events_copy, staging_songs_copy]
#insert_table_queries = [songplay_table_insert, user_table_insert, song_table_insert, artist_table_insert, time_table_insert]

